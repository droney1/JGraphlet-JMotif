#This experiment setup file is for static network
# use"//" or "#" to comment out a line
################################################
#(A)	The First line: expName xxx, where xxx is experiment name
#example:
expName triadRndGraphSocailNetwork2
#(b) 	The second line: outDir xxx, where xxx represents the output folder
#example:
outDir	./
#
#(C) 	the next lines are commands to process motif census computation or randdom graph generation in static networks
# syntax 1: "motifCensus	motifsize"
#       compute motif census for a graph, the format is:
# parameter		
#     motifsize is the size of the motif, 3 means triad
#Example:
motifCensus	3
# syntax 1.5: "motifNodeCensus 3"
#		A node in a graph of size n belongs to n(n-1)(n-2)/6 triads( or unique 3-node subgraph).  Let a node be denoted as v, and a motif type be denoted as t, This command computes how many t-type subgraphs contains v (That is, motif census for each node)
motifNodeCensus 3 
# syntax 2: "graphType commandType other_parameters"
#   graphType: indicate which random graph to generate or process for the given input network
#        We support four different type of random graph: 
#              joinInOutDegree: random graph with the same (in, out) degree sequence for nodes  
#              reciprocalInOutDegree: random graph with the same (reciprocal, in, out) degree sequence for nodes
#              numNodeEdge: random graph with the same number of nodes and edges  
#              MANPairModel: random graph with the same number of mutual, asymmetric and null dyad (edges/node-pair) 
#   commandType: indicate what operation (copmute triad census, get random graph infomation, generate random graph) to perform, see details below:
#   other parameter: for each command type there are different paramters required
#----------------------------------
#(D)    command type:
#0. "getRandomGraphInfo"
#  output a file with the information of the graph
#    in line 5: the numbers represent: 1.number of nodes, 2. number of edges, 3.average degree of a node, 4. second moment of in degree, 5.second moment of out degree, 6.probability of a directed edge between two nodes, 7.number of unique in-out degree pair, 8. max in degree, 9. max out degree, 10. number of unique in degree, 11. number of unique out degree. 12. expected number of self-loop in configuration model. 
#example: get information of a random graph with the same (in.out) degree pair sequence of a givne network
joinInOutDegree getRandomGraphInfo
#----------------------------------
#1.	"ExpectedTriadFreq	motifsize	time_to_repeat"
# this command computes motif frequence from a random graph given in/out degree sequences:
# parameter
#	    motifsize is the size of the motif, 3 means triad
#	    time_to_repeat is the number of time to repeat the computation, so as to obtain a statistic of the runtime.
#Example: compute the expected triad census in a random graph given the in/out degree sequence using an approximation model
joinInOutDegree	ExpectedTriadFreq	3	1
#Example: compute the expected triad census in a random graph given the number of nodes and edges using an exact model
numNodeEdge	ExpectedTriadFreq	3	1
#
# 
#----------------------------------
#2. "SampleGraphMotifFreq	a	b"
#	This command to compute triad frequency in random graph by simulation: generate b random graphs and count the frequency for each motif type and return b arrays of motif frequencies. 
# parameter
#		a=[3, 4] means a-node subgraph motif, 
#		b=[1,...) repeat this experiment for b times
#Example:
reciprocalInOutDegree	SampleGraphMotifFreq	3	400
#----------------------------------
#2. "generateRandomGraph	A"
#	This command generate and output the random graphs for a times and save them into a files. 
# parameter
#		a  repeat this experiment for A times
#Example:
reciprocalInOutDegree	generateRandomGraph	3	400
